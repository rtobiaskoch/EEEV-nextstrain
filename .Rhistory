newdata <- mtcars[order(mpg),]
mtcars
newdata <- mtcars[order(mpg),]
newdata <- mtcars[order(mtcars$mpg),]
View(newdata)
newdata <- mtcars[order(mtcars$mpg, mtcars$cyl),]
View(newdata)
newdata <- mtcars[order(mtcars$mpg, -mtcars$cyl),]
v = 1234
mtcars
data.frame(mtcars)
View(newdata)
class(newdata[1])
class(newdata[[1]])
ation = c("Australia", "Austria", "Belgium")
PCE = c(1032, 1093, 980)
#making it a Dataframe
dt = data.frame(Nation, PCE)
#Adding a column
dt$group = c("a", "a", "b")
Nation = c("Australia", "Austria", "Belgium")
PCE = c(1032, 1093, 980)
#making it a Dataframe
dt = data.frame(Nation, PCE)
#Adding a column
dt$group = c("a", "a", "b")
dt
levels(as.factor(dt$Nation))
Nation = c("Australia", "Canada", "Belgium")
PCE = c(1032, 1093, 980)
#making it a Dataframe
dt = data.frame(Nation, PCE)
#Adding a column
dt$group = c("a", "a", "b")
levels(as.factor(dt$Nation))
X = c(1,2,3,4)
x[which(x=>2)
x = c(1,2,3,4)
x[which(x=>2)
x = c(1,2,3,4)
x[which(x>=2)
x = c(1,2,3,4)
x[which(x>=2)]
a = c(1,2,3,4)
class(a)
re = 21/429
ru = 141/10028
rt = 162/12793
ape = (rt-ru)/re
ape
apt = (rt - ru) / rt
apt
rt
rt
ru
irnev = 265/587749
ir5 = 211/644770
irnev
ir5
irnev = 265/587749 * 100
ir5 = 211/644770 * 100
irnev
ir5
ir5/irnev
irnever/ir5
irnev/ir5
mtcars
#subsetting data
subset(mtcars, cyl ==4)
iris
class(iris$Species)
table(iris$Species)
iris$Species = ordered(iris$Species,
levels= c ("setosa", "versicolor",  "virginica")
)
class(iris$Species)
x = c(1,5,3,6) #values
y = c(4,3,1,6) #frequency aka count of values
weighted.mean(x,y)
mtcars
summaryBy(mpg ~ cyl, data=mtcars, FUN=mean, median, sd, IQR)
library(doBy)
summaryBy(mpg ~ cyl, data=mtcars, FUN=mean, median, sd, IQR)
summaryBy(mpg ~ cyl, data=mtcars, FUN= c(mean, median, sd, IQR))
library(doBy)
summaryBy(mpg ~ cyl,
data=mtcars,
FUN= c(count, mean, median, sd, IQR))
library(doBy)
summaryBy(mpg ~ cyl,
data=mtcars,
FUN= c(length, mean, median, sd, IQR))
table(mtcars(cyl))
table(mtcars$cyl)
table(iris$Species)
library(doBy)
summaryBy(mpg ~ cyl,
data=mtcars,
FUN= c(length, mean, median, sd, IQR))
dbinom(5, 10, .5)
dbinom(4, 10, .5)
dbinom(0,2,.2)
dbinom(1,2,.2)
dbinom(2,2,.2)
ppv = (.95*0.08)/
((.95*0.08)(.91*.92))
ppv = (0.95*0.08)/
((0.95*0.08)(0.91*0.92))
ppv = (0.95*0.08)/ ((0.95*0.08)(0.91*0.92))
4*5
ppv = (0.95*0.08)/((0.95*0.08)(0.91*0.92))
ppv = (0.95*0.08)
ppv = (0.95*0.08)/(0.95*0.08)
ppv = (0.95*0.08)/((0.95*0.08)(0.91*0.92))
ppv = (0.95*0.08)/((0.95*0.08)*(0.91*0.92))
ppv = (0.95*0.08)/((0.95*0.08)+(0.91*0.92))
ppv = (0.95*0.008)/((0.95*0.008)+(0.91*0.992))
ppv
(0.95*0.008)
(0.91*0.992)
(0.91*0.992)+(0.95*0.008)
ppv = (0.95*0.043)/((0.95*0.043)+(0.91*(1-0.043)))
ppv
(0.95*0.09)/((0.95*0.09)+(0.91*(1-0.09)))
(100-73)/15
(73-100)/15
qnorm(0.16, mean = 100, sd = 15)
dnorm(.16, mean = 100, sd = 15)
pnorm(73, mean = 100, sd = 15)
x=c(8,6,0,2,0,3,1,3,5,7,9)
val_x=0
for (i in 1:length(x)){
val_x=val_x+1
}
val_x
iris[,3]
head(iris)
iris[3,]
?sample
iris[,3]
iris(head)
head(iris)
t.test(iris$Petal.Length, iris$Sepal.Width, paired = T)
?var.test
?pt
?qt
quantile(iris$Sepal.Length, 45)
quantile(iris$Sepal.Length, .45)
IQR(iris$Sepal.Length)
quantile(iris$Sepal.Length)
summary(iris)
summary(iris$Sepal.Width)
Summary(iris$Sepal.Width)
install.packages("artsy")
install.packages("aRtsy")
library(aRtsy)
aRtsy::canvas_ant()
canvas_ant(colors = colorPalette("house"))
?canvas_ant
canvas_ant(colors, background = "#fafafa", iterations = 50000,
resolution = 500)
canvas_ant(ccoloes = colorPalette(), background = "#fafafa", iterations = 50000,
resolution = 500)
canvas_ant(ccoloes = colorPalette("house"), background = "#fafafa", iterations = 50000,
resolution = 500)
canvas_ant(colors = colorPalette("house"), background = "#fafafa", iterations = 50000,
resolution = 500)
canvas_ant(colors = colorPalette("house"), background = "#fafafa", iterations = 5000,
resolution = 500)
set.seed(1)
canvas_ant(colors = colorPalette("house"), background = "#fafafa", iterations = 5000,
resolution = 500)
set.seed(1)
canvas_collatz(colors = colorPalette("tuscany3"))
?canvas_collatz
canvas_collatz(colors, background = "#fafafa", n = 1212,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
canvas_collatz(colors, background = "#fafafa", n = 1212,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
canvas_collatz(colors, background = "#fafafa", n = 200,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
canvas_collatz(colors, background = "#fafafa", n = 1212,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
canvas_collatz(colors, background = "#fafafa", n = 1212,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
library(aRtsy)
canvas_collatz(colors, background = "#fafafa", n = 1212,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
canvas_collatz(colors = colorPalette("tuscany3"), background = "#fafafa", n = 1212,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
canvas_collatz(colors = colorPalette("tuscany3"), background = "#fafafa", n = 1212,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
set.seed(123)
canvas_collatz(colors = colorPalette("tuscany3"), background = "#fafafa", n = 1212,
angle.even = 0.0075, angle.odd = 0.0145, side = FALSE)
canvas_collatz(colors = colorPalette("tuscany3"), background = "#fafafa", n = 1212,
angle.even = 0.021, angle.odd = 0.0145, side = FALSE)
canvas_collatz(colors = colorPalette("tuscany3"), background = "#fafafa", n = 1212,
angle.even = 0.021, angle.odd = 0.020, side = FALSE)
set.seed(1)
canvas_function(colors = colorPalette("tuscany1"))
set.seed(1)
canvas_ant(colors = colorPalette("house"))
canvas_ant(colors = colorPalette("mixer2"))
canvas_ant(colors = colorPalette("mixer"))
canvas_ant(colors = colorPalette("vrolik1"))
?canvas_ant
canvas_ant(colors = colorPalette("vrolik1"), iterations = 50)
canvas_ant(colors = colorPalette("vrolik1"), iterations = 500000000)
canvas_ant(colors = colorPalette("vrolik1"), iterations = 100000)
canvas_ant(colors = colorPalette("vrolik1"), iterations = 200000)
canvas_ant(colors = colorPalette("vrolik1"), iterations = 20211212)
canvas_ant(colors = colorPalette("vrolik1"), iterations = 20211212, resolution = 1000)
canvas_ant(colors = colorPalette("sooph"), iterations = 20211212, resolution = 1000)
set.seed(1)
canvas_planet(colors = colorPalette("retro3"))
?canvas_planet
canvas_planet(colors = colorPalette("retro3"),
threshold = 5, iterations = 300,
starprob = 0.01, fade = 0.2,
radius = NULL, center.x = NULL, center.y = NULL,
light.right = TRUE, resolution = 500)
?canvas_planet
canvas_planet(colors = colorPalette("retro3"),
threshold = 5, iterations = 300,
starprob = 0.5, fade = 0.2,
radius = NULL, center.x = NULL, center.y = NULL,
light.right = TRUE, resolution = 500)
colors <- list(
c("khaki1", "lightcoral", "lightsalmon"),
c("dodgerblue", "forestgreen", "white"),
c("gray", "darkgray", "beige")
)
canvas_planet(colors,
radius = c(800, 400, 150),
center.x = c(1, 500, 1100),
center.y = c(1400, 500, 1000),
starprob = 0.005
)
colors <- list(
c("khaki1", "lightcoral", "lightsalmon"),
c("dodgerblue", "forestgreen", "white"),
c("gray", "darkgray", "beige")
)
canvas_planet(colors,
radius = c(100, 400),
center.x = c(500, 1100),
center.y = c(1400, 1000),
starprob = 0.005
)
p = canvas_collatz(colors = colorPalette("tuscany3"))
p
?canvas_collatz
p = canvas_collatz(colors = colorPalette("tuscany"),)
p2 = canvas_collatz(colors = colorPalette("tuscany2"), n = 2021, angle.even = 0.0076, angle.odd = 0.0146)
p2
p2 + p1
p2 + p
p
p + p2
p2 = canvas_collatz(colors = colorPalette("tuscany2"), n = 2021, angle.even = 0.0076, angle.odd = 0.01)
p2
canvas_collatz(colors = colorPalette("tuscany2"), n = 2021, angle.even = 0.0076, angle.odd = 0.0001)
canvas_collatz(colors = colorPalette("tuscany2"), n = 200, angle.even = 0.0076, angle.odd = 0.01)
canvas_collatz(colors = colorPalette("tuscany2"), n = 200, angle.even = 0.01, angle.odd = 0.01)
canvas_collatz(colors = colorPalette("tuscany2"), n = 200, angle.even = 0.02, angle.odd = 0.01)
canvas_collatz(colors = colorPalette("tuscany2"), n = 200, angle.even = 0.075, angle.odd = 0.00154)
canvas_collatz(colors = colorPalette("tuscany2"), n = 1000, angle.even = 0.075, angle.odd = 0.00154)
canvas_collatz(colors = colorPalette("tuscany2"), n = 1000, angle.even = 0.08, angle.odd = 0.00154)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.09, angle.odd = 0.00154)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.1, angle.odd = 0.00154)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.1, angle.odd = 0.015)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.1, angle.odd = 0.02)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.1, angle.odd = 0.1)
?canvas_collatz
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.008, angle.odd = 0.0145)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.009, angle.odd = 0.0145)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.0095, angle.odd = 0.0145)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.0075, angle.odd = 0.015)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.0076, angle.odd = 0.015)
canvas_collatz(colors = colorPalette("tuscany2"), n = 100, angle.even = 0.0077, angle.odd = 0.015)
canvas_collatz(colors = colorPalette("tuscany2"), n = 200, angle.even = 0.0077, angle.odd = 0.015)
canvas_collatz(colors = colorPalette("tuscany2"), n = 500, angle.even = 0.0077, angle.odd = 0.015)
canvas_collatz(colors = colorPalette("tuscany2"), n = 500, angle.even = 0.0077, angle.odd = 0.0145)
canvas_collatz(colors = colorPalette("tuscany2"), n = 500, angle.even = 0.0077, angle.odd = 0.0146)
canvas_collatz(colors = colorPalette("tuscany2"), n = 500, angle.even = 0.0077, angle.odd = 0.0147)
canvas_collatz(colors = colorPalette("tuscany2"), n = 500, angle.even = 0.0078, angle.odd = 0.0147)
canvas_flow(colors = colorPalette("tuscany2")
)
temp <- data.frame(
entry = c('A12','JW13','C','')
,to_remove = c('A','W','','D')
) %>%
sample_n(1e5,replace = T)
library(tidyverse)
temp <- data.frame(
entry = c('A12','JW13','C','')
,to_remove = c('A','W','','D')
) %>%
sample_n(1e5,replace = T)
View(temp)
head(temp)
temp <- temp %>%
mutate(
removed = str_remove(entry,to_remove)
)
temp2 = temp %>%
mutate(to_remove = na_if(to_remove, ''),
removed = str_remove(entry,to_remove))
View(temp2)
version()
version
RStudio.Version()
qnorm(0.3)
install.packages(“deSolve”)
install.packages(“shiny”)
install.packages("deSolve")
install.packages("shiny")
install.packages("adaptivetau")
## get incidence from onset date
cases <- incidence2::incidence(linelist, date_index = date_onset) %>% # get case counts by day
tidyr::complete(date_index = seq.Date(                              # ensure all dates are represented
from = min(date_index, na.rm = T),
to = max(date_index, na.rm=T),
by = "day"),
fill = list(count = 0)) %>%                                       # convert NA counts to 0
rename(I = count,                                                   # rename to names expected by estimateR
dates = date_index)
pacman::p_load_current_gh(tidyverse, readxl)
pacman::p_load(tidyverse, readxl)
## get incidence from onset date
cases <- incidence2::incidence(linelist, date_index = date_onset) %>% # get case counts by day
tidyr::complete(date_index = seq.Date(                              # ensure all dates are represented
from = min(date_index, na.rm = T),
to = max(date_index, na.rm=T),
by = "day"),
fill = list(count = 0)) %>%                                       # convert NA counts to 0
rename(I = count,                                                   # rename to names expected by estimateR
dates = date_index)
pacman::p_load(tidyverse, readxl, EpiEstim)
## get incidence from onset date
cases <- incidence2::incidence(linelist, date_index = date_onset) %>% # get case counts by day
tidyr::complete(date_index = seq.Date(                              # ensure all dates are represented
from = min(date_index, na.rm = T),
to = max(date_index, na.rm=T),
by = "day"),
fill = list(count = 0)) %>%                                       # convert NA counts to 0
rename(I = count,                                                   # rename to names expected by estimateR
dates = date_index)
pacman::p_load(tidyverse, EpiEstim, incidence2)
## get incidence from onset date
cases <- incidence2::incidence(linelist, date_index = date_onset) %>% # get case counts by day
tidyr::complete(date_index = seq.Date(                              # ensure all dates are represented
from = min(date_index, na.rm = T),
to = max(date_index, na.rm=T),
by = "day"),
fill = list(count = 0)) %>%                                       # convert NA counts to 0
rename(I = count,                                                   # rename to names expected by estimateR
dates = date_index)
?estimate_R
library(ggplot2)
# Create test data.
data <- data.frame(
category=c("A", "B", "C"),
count=c(10, 60, 30)
)
# Compute percentages
data$fraction = data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax = cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin = c(0, head(data$ymax, n=-1))
View(data)
list1 = list(c("a", "b", "c"))
list2 = list(c("a", "b"))
setdiff(list1, list2)
setdiff(list2, list1)
install.packages("grid")
install.packages("gridExtra")
pacman::p_load("dplyr", "stringr")
d = read.csv('data/study_dataset.csv')
ls
list.files()
setwd("../GLab Dropbox/GLab_team/Projects/2022_EEEV/EEEV-nextstrain/")
d = read.csv('data/study_dataset.csv')
View(d)
d %>% distinct("state")
d %>% distinct(state)
pacman::p_load("dplyr", "stringr")
d = read.csv('data/study_dataset.csv')
d2 = d %>%
mutate(state = stringr::str_replace(state,"_", " ")) %>% # remove _ for geo matching in nextstrain
mutate(date = dplyr::if_else(str_count(date) == 0, #if date is blank
paste0(year, "-XX-XX"), #combine yera plus -XX-XX for nextstrain
date))                   # else keep the same
View(d2)
View(d)
state = d %>% distinct(state)
gps = read.csv("data/statelatlong.csv")
View(gps)
state = d %>% distinct(state) %>%
left_join(gps, by = "state")
gps = read.csv("data/statelatlong.csv") %>% #pull in lat long to sort by north to south
rename(state = State) #make merging easier
state = d %>% distinct(state) %>%
left_join(gps, by = "state")
View(state)
gps = read.csv("data/statelatlong.csv") %>% #pull in lat long to sort by north to south
rename(state = City) #make merging easier
state = d %>% distinct(state) %>%
left_join(gps, by = "state")
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na()
??drop_na()
pacman::p_load("dplyr", "stringr", "tidyr")
d = read.csv('data/study_dataset.csv')
#code below currently not necessary Verity did this
d2 = d %>%
mutate(state = stringr::str_replace(state,"_", " ")) %>% # remove _ for geo matching in nextstrain
mutate(date = dplyr::if_else(str_count(date) == 0, #if date is blank
paste0(year, "-XX-XX"), #combine yera plus -XX-XX for nextstrain
date))                   # else keep the same
#write.csv(d2, "study_dataset2.csv")
#countries
gps = read.csv("data/statelatlong.csv") %>% #pull in lat long to sort by north to south
rename(state = City) #make merging easier
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na()
View(state)
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na() %>%
arrange(Latitude)
color = read.csv("data/palette.csv")
gps = read.csv("data/statelatlong.csv") %>% #pull in lat long to sort by north to south
rename(state = City) #make merging easier
color = read.csv("data/palette.csv")
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na() %>%
arrange(Latitude) %>%
cbind.data.frame(colors)
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na() %>%
arrange(Latitude) %>%
cbind.data.frame(.,colors)
state2 =  cbind.data.frame(state,colors)
state2 =  cbind(state,colors)
state2 =  cbind(state,color)
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na() %>%
arrange(Latitude) %>%
cbind(color)
rm(state2)
#countries
gps = read.csv("data/statelatlong.csv") %>% #pull in lat long to sort by north to south
rename(state = City) #make merging easier
color = read.csv("data/palette.csv")
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na() %>%
arrange(Latitude) %>%
cbind(color)
View(state)
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na() %>%
arrange(Latitude) %>%
cbind(color) %>%
mutate(x = "state")
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na() %>%
arrange(Latitude) %>%
cbind(color) %>%
mutate(x = "state") %>%
select(x, state, colors)
names(state) = NULL
View(state)
state = d %>% distinct(state) %>%
left_join(gps, by = "state") %>%
drop_na() %>%
arrange(Latitude) %>%
cbind(color) %>%
mutate(x = "state") %>%
select(x, state, colors)
?write.delim
??write.delimn
??write.delim
write.delim(state, "config/colors.tsv", delim = "\t", col_names = F)
pacman::p_load("dplyr", "stringr", "tidyr", "readr")
write.delim(state, "config/colors.tsv", delim = "\t", col_names = F)
??write_delim
write_delim(state, "config/colors.tsv", delim = "\t", col_names = F)
